values = 'Ankylosing spondylitis',
mart = ensembl)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(biomaRt)
library(BiocManager)
#找找序列
ensembl = useMart("ensembl")
dataset = useDataset("hsapiens_gene_ensembl", mart = ensembl)
snp_id = "rs123456"  # 替换为你的SNP ID
upstream_length = 1000
downstream_length = 1000
# 获取SNP的位置信息
snp_info = getBM(attributes = c("refsnp_id", "chromosome_name", "start_position"),
filters = "refsnp_id",
values = snp_id,
mart = dataset)
# 获取SNP的位置信息
snp_info = getBM(attributes = c("refsnp_id", "chromosome_name", "start_position"),
filters = "snp_filter",
values = snp_id,
mart = dataset)
searchAttributes(ensembl, pattern = "snp")
searchAttributes(dataset, pattern = "snp")
searchAttributes(dataset, pattern = "snp")
# 获取SNP的位置信息
snp_info = getBM(attributes = c("variation_name", "chromosome_name", "start_position"),
filters = "snp_filter",
values = snp_id,
mart = dataset)
searchFilters(dataset, pattern = "snp")
listFilters(dataset, pattern = "snp")
listFilters(dataset)
searchFilters(dataset, pattern = 'rs')
library(BiocManager)
listEnsembl()
ensembl <- useEnsembl(biomart = "genes")
searchDatasets(mart = ensembl, pattern = "hsapiens")
ensembl <- useDataset(dataset = "hsapiens_gene_ensembl", mart = ensembl)
ensembl <- useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")
filters = listFilters(ensembl)
View(filters)
#	start Start
# end End
#也許可以用上面的
snps <- useEnsembl(biomart = "snps")
searchDatasets(mart = snps, pattern = "hsapiens")
searchDatasets(mart = snps, pattern = "hsapiens")
snps <- useEnsembl(biomart = "snps", dataset = "hsapiens_snp")
#12           hsapiens_snp         Human Short Variants (SNPs and indels excluding flagged variants) (GRCh38.p14) GRCh38.p14
attr = listAttributes(snps)
attr
# 连接到Ensembl BioMart数据库
ensembl <- useMart("ensembl")
# 选择人类基因数据集
ensembl_human <- useDataset("hsapiens_gene_ensembl", mart = ensembl)
# 获取HBB基因的位置信息
gene_info <- getBM(attributes = c("external_gene_id", "chromosome_name", "start_position", "end_position"),
filters = "external_gene_id",
values = "HBB",
mart = ensembl_human)
# 获取HBB基因的位置信息
gene_info <- getBM(attributes = c("chromosome_name", "start_position", "end_position"),
filters = "external_gene_id",
values = "HBB",
mart = ensembl_human)
# 获取HBB基因的位置信息
gene_info <- getBM(attributes = c("entrezgene_accession", "chromosome_name", "start_position", "end_position"),
filters = "entrezgene_accession",
values = "HBB",
mart = ensembl_human)
# 打印基因位置信息
print(gene_info)
# 获取上游和下游序列
chromosome <- gene_info$chromosome_name
start_position <- gene_info$start_position
end_position <- gene_info$end_position
upstream_length <- 500
downstream_length <- 500
# 计算上游和下游的范围
upstream_start <- max(1, start_position - upstream_length)
downstream_end <- end_position + downstream_length
# 获取基因组序列
genome_seq <- getSequence(chromosome = chromosome,
start = upstream_start,
end = downstream_end,
mart = ensembl_human)
# 获取基因组序列
genome_seq <- getSequence(chromosome = chromosome,
start = upstream_start,
end = downstream_end,
type = "gene_flank",  # 指定序列类型为gene_flank
mart = ensembl_human)
# 获取基因组序列
genome_seq <- getSequence(chromosome = chromosome,
start = upstream_start,
end = downstream_end,
type = gene_flank,  # 指定序列类型为gene_flank
mart = ensembl_human)
# 获取基因组序列
genome_seq <- getSequence(chromosome = chromosome,
start = upstream_start,
end = downstream_end,
type = 'gene_flank',  # 指定序列类型为gene_flank
mart = ensembl_human)
library(tidyverse)
library(biomaRt)
library(BiocManager)
#找找序列
getSequence()
library(tidyverse)
library(biomaRt)
library(BiocManager)
#找找序列
#getSequence()
listEnsembl()
ensembl <- useEnsembl(biomart = "genes")
searchDatasets(mart = ensembl, pattern = "hsapiens")
ensembl <- useDataset(dataset = "hsapiens_gene_ensembl", mart = ensembl)
ensembl <- useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")
filters = listFilters(ensembl)
#	start Start
# end End
#也許可以用上面的
snps <- useEnsembl(biomart = "snps")
searchDatasets(mart = snps, pattern = "hsapiens")
snps <- useEnsembl(biomart = "snps", dataset = "hsapiens_snp")
#12           hsapiens_snp         Human Short Variants (SNPs and indels excluding flagged variants) (GRCh38.p14) GRCh38.p14
attr = listAttributes(snps)
attr
# 连接到Ensembl BioMart数据库
ensembl <- useMart("ensembl")
# 选择人类基因数据集
ensembl_human <- useDataset("hsapiens_gene_ensembl", mart = ensembl)
# 获取HBB基因的位置信息
gene_info <- getBM(attributes = c("entrezgene_accession", "chromosome_name", "start_position", "end_position"),
filters = "entrezgene_accession",
values = "HBB",
mart = ensembl_human)
# 打印基因位置信息
print(gene_info)
# 获取上游和下游序列
chromosome <- gene_info$chromosome_name
start_position <- gene_info$start_position
end_position <- gene_info$end_position
upstream_length <- 500
downstream_length <- 500
# 计算上游和下游的范围
upstream_start <- max(1, start_position - upstream_length)
downstream_end <- end_position + downstream_length
# 获取基因组序列
genome_seq <- getSequence(chromosome = chromosome,
start = upstream_start,
end = downstream_end,
type = 'gene_flank',  # 指定序列类型为gene_flank
mart = ensembl_human)
# 获取基因组序列
genome_seq <- getSequence(chromosome = chromosome,
start = upstream_start,
end = downstream_end,
type = 'coding_gene_flank',  # Example of a valid type
mart = ensembl_human)
# 获取基因组序列
genome_seq <- getSequence(chromosome = chromosome,
start = upstream_start,
end = downstream_end,
type = 'cdna',  # Example of a valid type
mart = ensembl_human)
library(tidyverse)
library(biomaRt)
library(BiocManager)
#找找序列
#getSequence()
listEnsembl()
ensembl <- useEnsembl(biomart = "genes")
searchDatasets(mart = ensembl, pattern = "hsapiens")
ensembl <- useDataset(dataset = "hsapiens_gene_ensembl", mart = ensembl)
ensembl <- useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")
filters = listFilters(ensembl)
#	start Start
# end End
#也許可以用上面的
snps <- useEnsembl(biomart = "snps")
searchDatasets(mart = snps, pattern = "hsapiens")
snps <- useEnsembl(biomart = "snps", dataset = "hsapiens_snp")
#12           hsapiens_snp         Human Short Variants (SNPs and indels excluding flagged variants) (GRCh38.p14) GRCh38.p14
attr = listAttributes(snps)
attr
if(interactive()){
mart <- useEnsembl("ensembl", dataset="hsapiens_gene_ensembl")
seq = getSequence(id = "BRCA1",
type = "hgnc_symbol",
seqType = "peptide",
mart = mart)
show(seq)
seq = getSequence(id="1939_at",
type="affy_hg_u95av2",
seqType="gene_flank",
upstream = 20,
mart = mart)
show(seq)
}
if(interactive()){
mart <- useEnsembl("ensembl", dataset="hsapiens_gene_ensembl")
seq = getSequence(id = "BRCA1",
type = "hgnc_symbol",
seqType = "peptide",
mart = mart)
show(seq)
seq = getSequence(id="1939_at",
type="affy_hg_u95av2",
seqType="gene_flank",
upstream = 20,
mart = mart)
show(seq)
}
if(interactive()){
mart <- useEnsembl("ensembl", dataset="hsapiens_gene_ensembl")
seq = getSequence(id = "BRCA1",
type = "hgnc_symbol",
seqType = "peptide",
mart = mart)
show(seq)
seq = getSequence(id="1939_at",
type="affy_hg_u95av2",
seqType="gene_flank",
upstream = 20,
mart = mart)
show(seq)
}
if(interactive()){
mart <- useEnsembl("ensembl", dataset="hsapiens_gene_ensembl")
seq = getSequence(id = "BRCA1",
type = "hgnc_symbol",
seqType = "peptide",
mart = mart)
show(seq)
seq = getSequence(id="1939_at",
type="affy_hg_u95av2",
seqType="gene_flank",
upstream = 20,
mart = mart)
show(seq)
}
library(biomaRt)
if(interactive()){
mart <- useEnsembl("ensembl", dataset="hsapiens_gene_ensembl")
seq = getSequence(id = "BRCA1",
type = "hgnc_symbol",
seqType = "peptide",
mart = mart)
show(seq)
seq = getSequence(id="1939_at",
type="affy_hg_u95av2",
seqType="gene_flank",
upstream = 20,
mart = mart)
show(seq)
}
library(tidyverse)
library(tidyverse)
library(biomaRt)
library(BiocManager)
setwd("C:/Users/mikali/Desktop/ProbeDesignOutput/ProbeDesignOutput/data")
mart = useMart('ensembl', dataset = 'hsapiens_gene_ensembl')
ensembl <- useEnsembl(biomart = "snps")
ensembl <- useDataset(dataset = "hsapiens_snp", mart = ensembl)
snps386 <- read_csv("unique_snp.csv")
View(snps386)
View(snps386)
snp_sequence <- getBM(attributes = c("refsnp_id",
"snp"),
filters = c("snp_filter", "chr_name", "start", "upstream_flank", "downstream_flank"),
values = list(snps386$`dbSNP ID`, snps386$Chromosome, snps386$Position, 800, 800),
mart = ensembl,
checkFilters = FALSE
)
snpmart<- useMart("ENSEMBL_MART_SNP",dataset = "hsapiens_snp")
snp_list <- list("rs25", "rs16944")
snp_sequence <- getBM(attributes = c("refsnp_id", "snp"),
filters = c("snp_filter", "upstream_flank", "downstream_flank"),
checkFilters = FALSE,
values = list(snp_list, 20, 20),
mart = snpmart,
bmHeader = TRUE)
snpmart<- useMart("ENSEMBL_MART_SNP",dataset = "hsapiens_snp")
snp_list <- c("rs25", "rs16944")
snp_sequence <- getBM(attributes = c("refsnp_id", "snp"),
filters = c("snp_filter", "upstream_flank", "downstream_flank"),
checkFilters = FALSE,
values = list(snp_list, 20, 20),
mart = snpmart,
bmHeader = TRUE)
View(snp_sequence)
View(snp_sequence)
snp_sequence <- getBM(attributes = c("refsnp_id", "snp"),
filters = c("snp_filter", "upstream_flank", "downstream_flank"),
checkFilters = FALSE,
values = list(snps386$`dbSNP ID`, 800, 800),
mart = snpmart,
bmHeader = TRUE)
snp_sequence <- getBM(attributes = c("refsnp_id",
"snp"),
filters = c("snp_filter", "chr_name", "start", "upstream_flank", "downstream_flank"),
values = list(snps386$`dbSNP ID`, snps386$Chromosome, snps386$Position, 800, 800),
mart = snpmart,
checkFilters = FALSE
)
View(snp_sequence)
View(snp_sequence)
write_csv(snps386$`dbSNP ID`, "dbSNP_ID.csv")
#Chromosome和Position是必要的
dbSNP <- snps386$`dbSNP ID`
write_csv(snps386$`dbSNP ID`, "dbSNP_ID.csv")
#Chromosome和Position是必要的
dbSNP <- data_frame(snps386$`dbSNP ID`)
#Chromosome和Position是必要的
dbSNP <- tibble(snps386$`dbSNP ID`)
View(dbSNP)
View(dbSNP)
write_csv(dbSNP, "dbSNP_ID.csv")
View(snp_sequence)
View(snp_sequence)
# 載入 dplyr 套件
library(dplyr)
# 創建一個示例 dataframe
df <- data.frame(
id = 1:6,
var1 = c(10, NA, 30, NA, 50, 60),
var2 = c("A", "B", "C", "D", "E", "F")
)
# 顯示原始 dataframe
print(df)
# 使用 dplyr 套件篩選 var1 為 NA 的觀測值
na_rows <- df %>% filter(is.na(var1))
# 顯示篩選後的結果
print(na_rows)
View(snp_sequence)
#Chromosome和Position是必要的
#哪些是沒有的，挑出來
# 使用 dplyr 套件篩選 var1 為 NA 的觀測值
na_snp_sequence <- snp_sequence %>% filter(is.na(snp))
na_snp_sequence
#Chromosome和Position是必要的
#哪些是沒有的，挑出來
# 使用 dplyr 套件篩選 var1 為 NA 的觀測值
na_snp_sequence <- snp_sequence %>% filter(is.na("snp"))
na_snp_sequence
View(snp_sequence)
# 創建大資料表
large_df <- data.frame(
id = c(1, 2, 3, 4),
name = c("Alice", "Bob", "Charlie", "David"),
score = c(90, 85, 88, 92)
)
# 創建小資料表（變數名稱不同）
small_df <- data.frame(
identifier = c(2, 3, 5),
full_name = c("Bob", "Charlie", "Eve"),
grade = c(95, 80, 90)
)
# 顯示原始資料框
print(large_df)
print(small_df)
和 small_df，根據不同的變數名稱
# 合併 large_df 和 small_df，根據不同的變數名稱
merged_df <- merge(large_df, small_df, by.x = "id", by.y = "identifier", all.x = TRUE)
# 顯示合併後的結果
print(merged_df)
View(snp_sequence)
View(snps386)
View(snps386)
#Chromosome和Position是必要的
#哪些是沒有的，挑出來
# 使用 dplyr 套件篩選 var1 為 NA 的觀測值
merged_df <- merge(snps386, snp_sequence, by.x = "dbSNP ID", by.y = "refsnp_id", all.x = TRUE)
na_snp_sequence <- merged_df %>% filter(is.na("snp"))
na_snp_sequence
View(merged_df)
na_snp_sequence <- merged_df %>% filter(is.na(snp))
na_snp_sequence
library(tibble)
my_tibble <- tibble(
x = 1:5,
y = c("A", "B", "C", "D", "E"),
z = x^2
)
print(my_tibble)
View(merged_df)
View(merged_df)
na_snp_sequence <- tibble(
`dbSNP ID` = c("rs5837881", "rs72867732", "rs28533662", "rs11363316", "rs2066847"),
Chromosome = c("2", "6", "6", "16", "16"),
Position = c("203843041", "31392512", "31358156", "30159695", "50729868")
)
print(my_tibble)
print(na_snp_sequence)
na_sequence <- getBM(attributes = c("refsnp_id",
"snp"),
filters = c("snp_filter", "chr_name", "start", "upstream_flank", "downstream_flank"),
values = list(na_snp_sequence$`dbSNP ID`, na_snp_sequence$Chromosome, na_snp_sequence$Position, 800, 800),
mart = snpmart,
checkFilters = FALSE
)
View(na_sequence)
merged_df <- merge(snps386, na_sequence, by.x = "dbSNP ID", by.y = "refsnp_id", all.x = TRUE)
View(merged_df)
# 創建兩個資料框架
df1 <- data.frame(
id = 1:3,
name = c("Alice", "Bob", "Charlie")
)
df2 <- data.frame(
id = 4:6,
name = c("David", "Eve", "Frank")
)
# 使用 rbind() 合併
combined_df <- rbind(df1, df2)
print(combined_df)
combined_seq <- rbind(snp_sequence, na_sequence)
merged_df <- merge(snps386, combined_seq, by.x = "dbSNP ID", by.y = "refsnp_id", all.x = TRUE)
View(merged_df)
View(merged_df)
View(merged_df)
View(combined_seq)
combined_seq <- rbind(snp_sequence, na_sequence)
merged_df <- merge(snps386, combined_seq, by.x = "dbSNP ID", by.y = "refsnp_id", all.x = TRUE)
View(mart)
View(merged_df)
View(snp_sequence)
View(na_sequence)
View(combined_seq)
View(snps386)
combined_seq <- rbind(snp_sequence, na_sequence)
combined_seq <- merge(snps386, combined_seq, by.x = "dbSNP ID", by.y = "refsnp_id", all.x = TRUE)
library(tidyverse)
library(biomaRt)
library(BiocManager)
setwd("C:/Users/mikali/Desktop/ProbeDesignOutput/ProbeDesignOutput/data")
mart = useMart('ensembl', dataset = 'hsapiens_gene_ensembl')
ensembl <- useEnsembl(biomart = "snps")
ensembl <- useDataset(dataset = "hsapiens_snp", mart = ensembl)
snps386 <- read_csv("unique_snp.csv")
#獲得序列
snpmart<- useMart("ENSEMBL_MART_SNP",dataset = "hsapiens_snp")
snp_sequence <- getBM(attributes = c("refsnp_id",
"snp"),
filters = c("snp_filter", "chr_name", "start", "upstream_flank", "downstream_flank"),
values = list(snps386$`dbSNP ID`, snps386$Chromosome, snps386$Position, 800, 800),
mart = snpmart,
checkFilters = FALSE
)
merged_df <- merge(snps386, snp_sequence, by.x = "dbSNP ID", by.y = "refsnp_id", all.x = TRUE)
na_snp_sequence <- merged_df %>% filter(is.na(snp))
na_snp_sequence
na_snp_sequence <- tibble(
`dbSNP ID` = c("rs5837881", "rs72867732", "rs28533662", "rs11363316", "rs2066847"),
Chromosome = c("2", "6", "6", "16", "16"),
Position = c("203843041", "31392512", "31358156", "30159695", "50729868")
)
print(na_snp_sequence)
na_sequence <- getBM(attributes = c("refsnp_id",
"snp"),
filters = c("snp_filter", "chr_name", "start", "upstream_flank", "downstream_flank"),
values = list(na_snp_sequence$`dbSNP ID`, na_snp_sequence$Chromosome, na_snp_sequence$Position, 800, 800),
mart = snpmart,
checkFilters = FALSE
)
combined_seq <- rbind(snp_sequence, na_sequence)
View(combined_seq)
merged_df <- merge(snps386, combined_seq, by.x = "dbSNP ID", by.y = "refsnp_id", all.x = TRUE)
merged_df
View(merged_df)
# 載入 dplyr 套件
library(dplyr)
# 創建一個示例資料框
df <- data.frame(
id = 1:6,
name = c("Alice", "Bob", "Charlie", "David", "Eve", "Frank"),
score = c(90, 85, 88, 92, 95, 80)
)
# 顯示原始資料框
print("原始資料框:")
print(df)
# 使用 filter() 去掉不需要的觀測值
filtered_df <- df %>% filter(name != "Bob")
# 顯示去掉不需要觀測值後的資料框
print("去掉不需要觀測值後的資料框:")
print(filtered_df)
View(snp_sequence)
filtered_snp_sequence <- snp_sequence %>% filter(!refsnp_id %in% c("rs11306716", "rs115879499", "rs117486637", "rs34670647", "rs5743293"))
combined_seq <- rbind(snp_sequence, na_sequence)
View(combined_seq)
merged_df <- merge(snps386, combined_seq, by.x = "dbSNP ID", by.y = "refsnp_id", all.x = TRUE)
View(merged_df)
filtered_snps386 <- snps386 %>% filter(!`dbSNP ID` %in% c("rs11306716", "rs115879499", "rs117486637", "rs34670647", "rs5743293"))
combined_seq <- rbind(snp_sequence, na_sequence)
merged_df <- merge(filtered_snps386, combined_seq, by.x = "dbSNP ID", by.y = "refsnp_id", all.x = TRUE)
filtered_snps386 <- rbind(filtered_snps386, na_snp_sequence)
filtered_snps386 <- snps386 %>% filter(!`dbSNP ID` %in% c("rs11306716", "rs115879499", "rs117486637", "rs34670647", "rs5743293"))
filtered_snps386 <- rbind(filtered_snps386, na_snp_sequence)
combined_seq <- rbind(snp_sequence, na_sequence)
merged_df <- merge(filtered_snps386, combined_seq, by.x = "dbSNP ID", by.y = "refsnp_id", all.x = TRUE)
View(merged_df)
#檢查一下序列形式
# 使用正则表达式提取"%%"之间的字符
merged_df$Extracted <- str_extract(merged_df$`snp`, "%(.*?)%")
# 去掉提取结果中的"%"
merged_df$Extracted <- gsub("%", "", merged_df$Extracted)
View(merged_df)
write_csv(merged_df, "seq386.csv")
